set_printoptions(precision=None, 
                 threshold=None, 
                 edgeitems=None,
                 linewidth=None, 
                 suppress=None,
                 nanstr=None,
                 infstr=None,
                 formatter=None)
precision:输出结果保留精度的位数
threshold:array数量的个数在小于threshold的时候不会被折叠
edgeitems:在array已经被折叠后，开头和结尾都会显示edgeitems个数
formatter:这个很有意思，像python3里面str.format(),就是可以对你的输出进行自定义的格式化
其他的暂时没用到

numpy.array
   ndarray.ndim	秩，即轴的数量或维度的数量
    ndarray.shape	数组的维度，对于矩阵，n 行 m 列
    ndarray.size	数组元素的总个数，相当于 .shape 中 n*m 的值
    ndarray.dtype	ndarray 对象的元素类型
    ndarray.itemsize	ndarray 对象中每个元素的大小，以字节为单位
    ndarray.flags	ndarray 对象的内存信息
    ndarray.real	ndarray元素的实部
    ndarray.imag	ndarray 元素的虚部
    ndarray.data	包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。
    字符	对应类型
    b	布尔型
    i	(有符号) 整型
    u	无符号整型 integer
    f	浮点型
    c	复数浮点型
    m	timedelta（时间间隔）
    M	datetime（日期时间）
    O	(Python) 对象
    S, a	(byte-)字符串
    U	Unicode
    V	原始数据 (void)
    
numpy.empty
    numpy.empty 方法用来创建一个指定形状（shape）、数据类型（dtype）且未初始化的数组：
    numpy.empty(shape, dtype = float, order = 'C')
    数组内容未初始化

numpy.zeros
    创建指定大小的数组，数组元素以 0 来填充：
    numpy.zeros(shape, dtype = float, order = 'C')
    实例：
    import numpy as np

    # 默认为浮点数
    x = np.zeros(5) 
    print(x)

    # 设置类型为整数
    y = np.zeros((5,), dtype = np.int) 
    print(y)

    # 自定义类型
    z = np.zeros((2,2), dtype = [('x', 'i4'), ('y', 'i4')])  
    print(z)
    输出：
    [0. 0. 0. 0. 0.]
    [0 0 0 0 0]
    [[(0, 0) (0, 0)]
     [(0, 0) (0, 0)]]
numpy.ones
    创建指定形状的数组，数组元素以 1 来填充：
    numpy.ones(shape, dtype = None, order = 'C')

numpy.asarray
    numpy.asarray 类似 numpy.array，但 numpy.asarray 参数只有三个，比 numpy.array 少两个。

    numpy.asarray(a, dtype = None, order = None)
    参数	  描述
    a	   任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组
    dtype	数据类型，可选
    order	可选，有"C"和"F"两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。

numpy.frombuffer
    numpy.frombuffer 用于实现动态数组。

    numpy.frombuffer 接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。

    numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)
    注意：buffer 是字符串的时候，Python3 默认 str 是 Unicode 类型，所以转成 bytestring需要在原 str 前加上 b。
    参数	描述
    buffer	可以是任意对象，会以流的形式读入。
    dtype	返回数组的数据类型，可选
    count	读取的数据数量，默认为-1，读取所有数据。
    offset	读取的起始位置，默认为0。

numpy.fromiter
    numpy.fromiter 方法从可迭代对象中建立 ndarray 对象，返回一维数组。

    numpy.fromiter(iterable, dtype, count=-1)

    实例：
    import numpy as np 
 
    # 使用 range 函数创建列表对象  
    list=range(5)
    it=iter(list)

    # 使用迭代器创建 ndarray 
    x=np.fromiter(it, dtype=float)
    print(x)

numpy.linspace
    numpy.linspace 函数用于创建一个一维数组，数组是一个等差数列构成的，格式如下：

    np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
    b =np.linspace(1,10,10).reshape([10,1]) 生成10个一维数组
    参数	描述
    start	序列的起始值
    stop	序列的终止值，如果endpoint为true，该值包含于数列中
    num	要生成的等步长的样本数量，默认为50
    endpoint	该值为 true 时，数列中中包含stop值，反之不包含，默认是True。
    retstep	如果为 True 时，生成的数组中会显示间距，反之不显示。
    dtype	ndarray 的数据类型

numpy.logspace
    numpy.logspace 函数用于创建一个于等比数列。格式如下：
    默认底数为10
    np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)

    参数	描述
    start	序列的起始值为：base ** start
    stop	序列的终止值为：base ** stop。如果endpoint为true，该值包含于数列中
    num	要生成的等步长的样本数量，默认为50
    endpoint	该值为 true 时，数列中中包含stop值，反之不包含，默认是True。
    base	对数 log 的底数。
    dtype	ndarray 的数据类型

NumPy 切片和索引
    ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。

    ndarray 数组可以基于 0 - n 的下标进行索引，切片对象可以通过内置的 slice 函数，并设置 start, stop 及 step 参数进行，从原数组中切割出一个新数组。

    实例:
    import numpy as np
    a = np.arange(10)
    s = slice(2,7,2)   # 从索引 2 开始到索引 7 停止，间隔为2  
    # b = a[2:7:2]   # 从索引 2 开始到索引 7 停止，间隔为2   #不包括停止索引
    print (a[s])
    输出结果为：
    [2  4  6]
    切片还可以包括省略号 …，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的 ndarray。

    实例
    import numpy as np

    a = np.array([[1,2,3],[3,4,5],[4,5,6]])  
    print (a[...,1])   # 第2列元素
    print (a[1,...])   # 第2行元素
    print (a[...,1:])  # 第2列及剩下的所有元素
    输出结果为：

    [2 4 5]
    [3 4 5]
    [[2 3]
     [4 5]
     [5 6]]
整数数组索引
    以下实例获取数组中(0,0)，(1,1)和(2,0)位置处的元素。

    实例
    import numpy as np 

    x = np.array([[1,  2],  [3,  4],  [5,  6]]) 
    y = x[[0,1,2],  [0,1,0]]  
    print (y)
    输出结果为：

    [1  4  5]

    以下实例获取了 4X3 数组中的四个角的元素。 行索引是 [0,0] 和 [3,3]，而列索引是 [0,2] 和 [0,2]。

    实例
    import numpy as np 

    x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])  
    print ('我们的数组是：' )
    print (x)
    print ('\n')
    rows = np.array([[0,0],[3,3]])   #第1-4个数的横坐标为0，0,3,3
    cols = np.array([[0,2],[0,2]])   #第1-4个数的纵坐标为0,2,0,2
    y = x[rows,cols]  
    print  ('这个数组的四个角元素是：')#（0,0）（0,2）（3,0）（3,2）
    print (y)

    输出结果为：

    我们的数组是：
    [[ 0  1  2]
     [ 3  4  5]
     [ 6  7  8]
     [ 9 10 11]]


    这个数组的四个角元素是：
    [[ 0  2]
     [ 9 11]]


布尔索引
    我们可以通过一个布尔数组来索引目标数组。
    布尔索引通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。
    以下实例获取大于 5 的元素：
    实例：
    import numpy as np 

    x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])  
    print ('我们的数组是：')
    print (x)
    print ('\n')
    # 现在我们会打印出大于 5 的元素  
    print  ('大于 5 的元素是：')
    print (x[x >  5])
    输出结果为：

    我们的数组是：
    [[ 0  1  2]
     [ 3  4  5]
     [ 6  7  8]
     [ 9 10 11]]


    大于 5 的元素是：
    [ 6  7  8  9 10 11]
    
    3、传入多个索引数组（要使用np.ix_）

    实例
    import numpy as np 

    x=np.arange(32).reshape((8,4))
    print (x[np.ix_([1,5,7,2],[0,3,1,2])])
    输出结果为：

    [[ 4  7  5  6]
     [20 23 21 22]
     [28 31 29 30]
     [ 8 11  9 10]]
      
控制遍历顺序
    for x in np.nditer(a, order='F'):Fortran order，即是列序优先；
    for x in np.nditer(a.T, order='C'):C order，即是行序优先；


修改数组中元素的值
    nditer 对象有另一个可选参数 op_flags。 默认情况下，nditer 将视待迭代遍历的数组为只读对象（read-only），为了在遍历数组的同时，实现对数组元素值得修改，必须指定 read-write 或者 write-only 的模式。

    实例
    import numpy as np

    a = np.arange(0,60,5) 
    a = a.reshape(3,4)  
    print ('原始数组是：')
    print (a)
    print ('\n')
    for x in np.nditer(a, op_flags=['readwrite']): 
        x[...]=2*x 
    print ('修改后的数组是：')
    print (a)

    输出结果为：
    原始数组是：
    [[ 0  5 10 15]
     [20 25 30 35]
     [40 45 50 55]]

    修改后的数组是：
    [[  0  10  20  30]
     [ 40  50  60  70]
     [ 80  90 100 110]]

广播迭代
    如果两个数组是可广播的，nditer 组合对象能够同时迭代它们。 假设数组 a 的维度为 3X4，数组 b 的维度为 1X4 ，则使用以下迭代器（数组 b 被广播到 a 的大小）。

    实例
    import numpy as np 

    a = np.arange(0,60,5) 
    a = a.reshape(3,4)  
    print  ('第一个数组为：')
    print (a)
    print  ('\n')
    print ('第二个数组为：')
    b = np.array([1,  2,  3,  4], dtype =  int)  
    print (b)
    print ('\n')
    print ('修改后的数组为：')
    for x,y in np.nditer([a,b]):  
        print ("%d:%d"  %  (x,y), end=", " )
    输出结果为：
    第一个数组为：
    [[ 0  5 10 15]
     [20 25 30 35]
     [40 45 50 55]]

    第二个数组为：
    [1 2 3 4]
    修改后的数组为：
    0:1, 5:2, 10:3, 15:4, 20:1, 25:2, 30:3, 35:4, 40:1, 45:2, 50:3, 55:4,
numpy.reshape
    numpy.reshape 函数可以在不改变数据的条件下修改形状，格式如下： 
    numpy.reshape(arr, newshape, order='C')
    arr：要修改形状的数组
    newshape：整数或者整数数组，新的形状应当兼容原有形状
    order：'C' -- 按行，'F' -- 按列，'A' -- 原顺序，'k' -- 元素在内存中的出现顺序。

numpy.ndarray.flat
    对数组中每个元素都进行处理，可以使用flat属性，该属性是一个数组元素迭代器：
    for element in a.flat:
        print (element)
    
numpy.ndarray.flatten
    numpy.ndarray.flatten 返回一份数组拷贝，对拷贝所做的修改不会影响原始数组，格式如下：
    ndarray.flatten(order='C')
    参数说明：
    order：'C' -- 按行，'F' -- 按列，'A' -- 原顺序，'K' -- 元素在内存中的出现顺序。

numpy.ravel
    numpy.ravel() 展平的数组元素，顺序通常是"C风格"，返回的是数组视图（view，有点类似 C/C++引用reference的意味），修改会影响原始数组。
    该函数接收两个参数：
    numpy.ravel(a, order='C')
    参数说明：
    order：'C' -- 按行，'F' -- 按列，'A' -- 原顺序，'K' -- 元素在内存中的出现顺序。    

翻转数组
    函数	描述
    transpose	对换数组的维度
    ndarray.T	和 self.transpose() 相同
    rollaxis	向后滚动指定的轴
    swapaxes	对换数组的两个轴     

numpy.transpose
    numpy.transpose 函数用于对换数组的维度，格式如下：
    numpy.transpose(arr, axes)
    参数说明:
    arr：要操作的数组
    axes：整数列表，对应维度，通常所有维度都会对换。 
    
numpy.rollaxis
    numpy.rollaxis 函数向后滚动特定的轴到一个特定位置，格式如下：
    numpy.rollaxis(arr, axis, start)
    参数说明：
    arr：数组
    axis：要向后滚动的轴，其它轴的相对位置不会改变
    start：默认为零，表示完整的滚动。会滚动到特定位置。
    实例
    import numpy as np
    # 创建了三维的 ndarray
    a = np.arange(8).reshape(2,2,2)
    print ('原数组：')
    print (a)
    print ('\n')
    # 将轴 2 滚动到轴 0（宽度到深度）
    print ('调用 rollaxis 函数：')
    print (np.rollaxis(a,2))
    # 将轴 0 滚动到轴 1：（宽度到高度）
    print ('\n')
    print ('调用 rollaxis 函数：')
    print (np.rollaxis(a,2,1))
    输出结果如下：
    原数组：
    [[[0 1]
      [2 3]]
     [[4 5]
      [6 7]]]
    调用 rollaxis 函数：
    [[[0 2]
      [4 6]]
     [[1 3]
      [5 7]]]
    调用 rollaxis 函数：
    [[[0 2]
      [1 3]]
     [[4 6]
      [5 7]]]
    
numpy.swapaxes
    numpy.swapaxes 函数用于交换数组的两个轴，格式如下：

    numpy.swapaxes(arr, axis1, axis2)
    arr：输入的数组
    axis1：对应第一个轴的整数
    axis2：对应第二个轴的整数
    
    实例
    import numpy as np
    # 创建了三维的 ndarray
    a = np.arange(8).reshape(2,2,2)
    print ('原数组：')
    print (a)
    print ('\n')
    # 现在交换轴 0（深度方向）到轴 2（宽度方向）
    print ('调用 swapaxes 函数后的数组：')
    print (np.swapaxes(a, 2, 0))
    输出结果如下：
    原数组：
    [[[0 1]
      [2 3]]
     [[4 5]
      [6 7]]]
    调用 swapaxes 函数后的数组：
    [[[0 4]
      [2 6]]
     [[1 5]
      [3 7]]]

修改数组维度
    维度	描述
    broadcast	产生模仿广播的对象
    broadcast_to	将数组广播到新形状
    expand_dims	扩展数组的形状
    squeeze	从数组的形状中删除一维条目

    

matlib.empty()
    matlib.empty() 函数返回一个新的矩阵，语法格式为：
    numpy.matlib.empty(shape, dtype, order)   
    参数说明：
    shape: 定义新矩阵形状的整数或整数元组
    Dtype: 可选，数据类型
    order: C（行序优先） 或者 F（列序优先）

舍入函数
numpy.around() 函数返回指定数字的四舍五入值。
    numpy.around(a,decimals)  
    参数说明：
    a: 数组
    decimals: 舍入的小数位数。 默认值为0。 如果为负，整数将四舍五入到小数点左侧的位置

numpy.floor()
    numpy.floor() 返回小于或者等于指定表达式的最大整数，即向下取整。

算数函数   
numpy.reciprocal()
    numpy.reciprocal() 函数返回参数逐元素的倒数。如 1/4 倒数为 4/1。    
numpy.mod()
    numpy.mod() 计算输入数组中相应元素的相除后的余数。 函数 numpy.remainder() 也产生相同的结果。
    
统计函数
numpy.amin() 和 numpy.amax()
    numpy.amin() 用于计算数组中的元素沿指定轴的最小值。
    numpy.amax() 用于计算数组中的元素沿指定轴的最大值。
  
    import numpy as np 
    a = np.array([[3,7,5],[8,4,3],[2,4,9]])  
    print ('我们的数组是：')
    print (a)
    print (np.amin(a,1))
    print (np.amin(a,0))
    print (np.amax(a))
    print (np.amax(a, axis =  0))
    
numpy.ptp()
    numpy.ptp()函数计算数组中元素最大值与最小值的差（最大值 - 最小值）。
    
    import numpy as np 

numpy.percentile()
    百分位数是统计中使用的度量，表示小于这个值的观察值的百分比。 函数numpy.percentile()接受以下参数。
    numpy.percentile(a, q, axis)
    
    参数说明：

    a: 输入数组
    q: 要计算的百分位数，在 0 ~ 100 之间
    axis: 沿着它计算百分位数的轴

    a = np.array([[10, 7, 4], [3, 2, 1]])
    print (a)
    print ('调用 percentile() 函数：')
    # 50% 的分位数，就是 a 里排序之后的中位数
    print (np.percentile(a, 50)) 
    # axis 为 0，在纵列上求
    print (np.percentile(a, 50, axis=0)) 
    # axis 为 1，在横行上求
    print (np.percentile(a, 50, axis=1)) 
    # 保持维度不变
    print (np.percentile(a, 50, axis=1, keepdims=True))
numpy.median()
    numpy.median() 函数用于计算数组 a 中元素的中位数（中值）
    
numpy.mean()
    numpy.mean() 函数返回数组中元素的算术平均值。 如果提供了轴，则沿其计算。算术平均值是沿轴的元素的总和除以元素的数量。    

numpy.average()
    numpy.average() 函数根据在另一个数组中给出的各自的权重计算数组中元素的加权平均值。该函数可以接受一个轴参数。 如果没有指定轴，则数组会被展开。加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。考虑数组[1,2,3,4]和相应的权重[4,3,2,1]，通过将相应元素的乘积相加，并将和除以权重的和，来计算加权平均值。

numpy.std() numpy.var()
    标准差与方差
    
排序函数
numpy.sort()
    numpy.sort() 函数返回输入数组的排序副本。函数格式如下：
    numpy.sort(a, axis, kind, order)
    
    参数说明：
    a: 要排序的数组
    axis: 沿着它排序数组的轴，如果没有数组会被展开，沿着最后的轴排序， axis=0 按列排序，axis=1 按行排序
    kind: 默认为'quicksort'（快速排序）   'mergesort'（归并排序）  'heapsort'（堆排序）
    order: 如果数组包含字段，则是要排序的字段

numpy.argsort()
    numpy.argsort() 函数返回的是数组值从小到大的索引值。

numpy.nonzero()
    numpy.nonzero() 函数返回输入数组中非零元素的索引。
numpy.where()
    numpy.where() 函数返回输入数组中满足给定条件的元素的索引。
numpy.extract()
    numpy.extract() 函数根据某个条件从数组中抽取元素，返回满条件的元素。























    
    
    
